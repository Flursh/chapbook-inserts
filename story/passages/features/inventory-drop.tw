:: inventory : drop
addToInventory:'brocoli'
--
## inventory : Dropzones

Drop zones can be applied to text or object (by wrapping them in the right element with the dataset). These will react to the drag events of items held in the inventory. The `highlighted` property makes the object more obviously interactable while disabling it only makes them react when hovered with an item. _this is customizable in css of course_

```ts
interface DropZone {
    /** only accepts item for now */
    drop: 'item';
    /** true will add the css class "highlighted" to the result */
    highlighted: boolean;
    /** comma separated string with the name of all accepted items */
    accept: string;
    /** properties bound to a specific item
     * should begin with the item name followed by the action
     * or the state variable you want to use
     */
    /** removes the item on successful drop */
    "item.remove": boolean;
    /** open a dialog with a passage as its content on successful drop */
    "item.dialog": string;
    /** any other property can also be added and will try to update the state */
    "item.fire": any;
}
```

<div class="warning">

Like for `stateUpdates`, the order in which you define your properties matter. So if you open the dialog before updating the state, the open apassage will not have access to the updated values when it gets rendered. Try to setup your insert as : 

```
- drop: 'item'
- highlighted: true / false
- accept: 'comma,separated,list'
- item.stateVariable: x
- item.otherVariable: y
- item.remove: true / false
- item.dialog: 'passage name'
```
</div>

### reacts on dagger & brocoli and opens dialog, highlighted ▾
{ embed passage: 'inventroy : drop - example_1' }

**from :**
```js
[javascript]
    write(engine.story.passageNamed('inventroy : drop - example_1').source)
[continue]
```

**to :**
```html
{ embed passage: 'inventroy : drop - example_1' }
```

### reacts on cephalopod & skull and opens dialog, not highlighted ▾
{ embed passage: 'inventroy : drop - example_2' }

**from :**

```js
[javascript]
    write(engine.story.passageNamed('inventroy : drop - example_2').source)
[continue]
```

**renders the following element :**

```html
{ embed passage: 'inventroy : drop - example_2' }
```

When a wrong item (not part of the accepted list) is dropped on the drop-zone, a warning is printed to the console and and event is emitted. If you want to have an action on it, check it on `engine.event.on('wrong-item-drop', (item) => ...)` where the item is the string in `data-item`

### creating items in passages
Items can also be part of a passage, they can be dragged to the inventory to get an open slot. for example, consider this :
{ embed passage: 'inventroy : drop - example_3' }

You can drag the label to you inventory and add a brocoli to it. On successful drop, the `replace` property will set its value as the object, making it undraggable.

source: 
```js
[javascript]
    write(engine.story.passageNamed('inventroy : drop - example_3').source)
[continue]
```

result:
```html
{ embed passage: 'inventroy : drop - example_3' }
```

You can also use images to create the item

{ embed passage: 'inventroy : drop - example_4' }

source: 
```js
[javascript]
    write(engine.story.passageNamed('inventroy : drop - example_4').source)
[continue]
```

result: 
```html
{ embed passage: 'inventroy : drop - example_4' }
```

:: inventory : dialog_brocoli
_brocolisCount: engine.state.inventory.count('brocoli')
--
Oh man, i love brocolis! i will keep that one!\
you have : {_brocolisCount} brocoli(s) left!

:: inventory : dialog_dagger
what a sharp dagger that is!

:: inventory : dialog_cephalopod
that's some slimy load of cuteness we have here!

:: inventory : dialog_skull
Urgh, they don't look too well

:: inventroy : drop - example_1
{
    drop: 'item',
    highlighted: true,
    accept: 'brocoli,dagger',
    "brocoli.remove": true,
    "brocoli.dialog": 'inventory : dialog_brocoli',
    "dagger.suspicious": 2,
    "dagger.dialog": 'inventory : dialog_dagger',
    label: 'give me dagger or brocoli stuff'
}

:: inventroy : drop - example_2
{
    drop: 'item',
    highlighted: false,
    accept: 'cephalopod,skull',
    "skull.dialog": 'inventory : dialog_skull',
    "cephalopod.dialog": 'inventory : dialog_cephalopod',
    label: 'give me octopus or skull stuff'
}

:: inventroy : drop - example_3
{
    item: 'brocoli',
    label: 'delicious brocoli',
    highlighted: true,
    replace: `<span style='color:green'>you picked the brocoli</span>`
}

:: inventroy : drop - example_4
<div style="max-width:200px;margin:auto;text-align:center">
{
    item: 'dagger',
    label: 'a wonderful dagger',
    highlighted: true,
    replace: '[empty]',
    src: 'https://wiki.inferna.net/gameicons/items/weapons/dagger/dagger_01.png'
}
</div>